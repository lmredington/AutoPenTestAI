# Tool: ipconfig 
# Runs command
# Information Collected: 
#   * Network IPv4 Address (Network)
#   * Subnet Mask
#   * CIDR
#  -------------------------
# | Completed Functionality |
#  -------------------------
#   * network data is collected


import re
import csv
import subprocess
import os
import ipaddress

## Run a Command
def run_command(command):
    print("\nRunning ", command)
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = process.communicate()
    return_code = process.returncode
    if return_code == 0:
        # Command was successful
        print("Output:", output.decode())
        print("Command executed successfully\n")
        
    else:
        # Command failed
        print("Error output:", error.decode())
        print(f"Error executing command. Return code: {return_code}")
        
    return return_code, output.decode()

    
    
# ======================================BEGIN MAIN CODE========================================= #
    
    
local_ip_output_file = 'logs\original-output\ipconfig_output.xml'
filtered_local_ip_file = 'logs/altered-output/local_ips-windows.csv'

network_ip_data = []
network_host_data = []

#---------------Get Local IP addresses------------#

result, output = run_command("ipconfig /all > "+local_ip_output_file)

# Read data from the input file
with open(local_ip_output_file, 'r') as file:
    data = file.read()

# Regular expressions to match IPv4 addresses and subnet masks
ip_regex = re.compile(r'IPv4 Address. . . . . . . . . . . : (\d+\.\d+\.\d+\.\d+)')
mask_regex = re.compile(r'Subnet Mask . . . . . . . . . . . : (\d+\.\d+\.\d+\.\d+)')

# Extract IPv4 addresses and subnet masks
ips = ip_regex.findall(data)
masks = mask_regex.findall(data)

# Write to CSV file
with open(filtered_local_ip_file, 'w', newline='') as csvfile:
    csvwriter = csv.writer(csvfile)
    # Write the header
    csvwriter.writerow(["IP Address", "Subnet Mask", "CIDR"])
    # Write the IPs and masks
    for ip, mask in zip(ips, masks):
        network_ip=ipaddress.IPv4Network(f'{ip}/{mask}', strict=False)      # Get network IP
        cidr_suffix = f'/{network_ip.prefixlen}'                               # Extract CIDR
        csvwriter.writerow([network_ip, mask, cidr_suffix])                 # Write Network IP and Mask to CSV
        network_host_data.append({"IP Address": network_ip, "Subnet Mask": mask, "CIDR": cidr_suffix})   # Add Network IP & Subnet Mask to network_host_data