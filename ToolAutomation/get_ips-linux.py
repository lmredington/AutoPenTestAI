# Tool: ifconfig
# Runs command
# Information Collected: 
#   * Network IPv4 Address (Network)
#   * Subnet Mask
#   * CIDR
#  -------------------------
# | Completed Functionality |
#  -------------------------
#   * host scan successful - data is not extracted into csv     -- add timer limit to nmap scan

import re
import csv
import subprocess
import os
import ipaddress
import xml.etree.ElementTree as ET
import json

## Run a Command
def run_command(command):
    print("\nRunning ", command)
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = process.communicate()
    return_code = process.returncode
    if return_code == 0:
        # Command was successful
        print("Output:", output.decode())
        print("Command executed successfully\n")
        
    else:
        # Command failed
        print("Error output:", error.decode())
        print(f"Error executing command. Return code: {return_code}")
        
    return return_code, output.decode()
    
## Get Host Per Network
def extract_host_ip(host_data, xml_file):
    # Parse the XML content
    tree = ET.parse(xml_file)
    root = tree.getroot()

    # Iterate over each 'host' element in the XML
    for host in root.findall('.//host'):
        # Extract IPv4 address
        address_elem = host.find("./address[@addrtype='ipv4']")
        ipv4 = address_elem.attrib['addr'] if address_elem is not None else "n\a"
    
        # Extract hostname
        hostname_elem = host.find("./hostnames/hostname")
        hostname = hostname_elem.attrib['name'] if hostname_elem is not None else None
        
    
        # If hostname is not available, extract vendor information
        if not hostname:
            address_mac_elem = host.find("./address[@addrtype='mac']")
            vendor = address_mac_elem.attrib['vendor'] if address_mac_elem is not None else None
            host_data.append((ipv4, vendor))
        else:
            host_data.append((ipv4, hostname))

    return host_data
    
# ======================================BEGIN MAIN CODE========================================= #
    
    
local_ip_output_file="logs/original-output/ifconfig_output.xml"
filtered_local_ip_file = 'logs/altered-output/local_ips-linux.csv'

network_ip_data = []
network_host_data = []


#---------------Get Local (Network) IP addresses------------#


ip_command = "ifconfig > "+local_ip_output_file
run_command(ip_command)

# Read data from the input file
with open(local_ip_output_file, 'r') as file:
    data = file.read()

# Regular expressions to match IPv4 addresses and subnet masks
ip_regex = re.compile(r'inet (\d+\.\d+\.\d+\.\d+)')
mask_regex = re.compile(r'netmask (\d+\.\d+\.\d+\.\d+)')

# Extract IPv4 addresses and subnet masks
ips = ip_regex.findall(data)
masks = mask_regex.findall(data)

# Write to CSV file
with open(filtered_local_ip_file, 'w', newline='') as csvfile:
    csvwriter = csv.writer(csvfile)
    # Write the header
    csvwriter.writerow(["IP Address", "Network IP Address", "Subnet Mask", "CIDR"])
    # Write the IPs and masks
    for ip, mask in zip(ips, masks):
        network=ipaddress.IPv4Network(f'{ip}/{mask}', strict=False)      # Get network IP
        cidr_suffix = f'/{network.prefixlen}'                               # Extract CIDR
        network_ip = network.network_address
        csvwriter.writerow([network_ip, network, mask, cidr_suffix])                 # Write IP, Network IP, Mask, & CIDR to CSV
        network_host_data.append({"IP Address": str(network_ip), "Network Address": str(network), "Subnet Mask": mask, "CIDR": cidr_suffix})   # Add IP, Network IP, Mask, & CIDR to network_host_data
        print(network_ip)



print(f"IP addresses and subnet masks have been written to {filtered_local_ip_file}")

print(network_host_data)

## Get Host IPs
for host_data in network_host_data:  
    network_ip = host_data["IP Address"]
    #network_ip_str= str(network_ip)
    network= host_data["Network Address"]
    #network_str=str(network)
    network_host_scan_file = "logs/original-output/"+network_ip+"_host_scan.xml"                              # Set Output file name
    host_discover_command = "nmap -T5 -sn --system-dns -oX "+network_host_scan_file+" "+network     # Set Host Discover Nmap Command
    run_command(host_discover_command)
    network_host_data = extract_host_ip(network_host_data, network_host_scan_file)              # Save data into host_data
    
print(network_host_data)
print("\n")
print(network_ip_data)

